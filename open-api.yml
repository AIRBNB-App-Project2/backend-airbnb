openapi: '3.0.0'
info:
  title: e-commerce API
  description: open api for e-commerce
  contact:
    name: faliq adlan
    email: faliq67@gmail.com
  version: 1.0.0
servers:
  - url: http://{environment}.shop/
    variables:
      environment : 
          default: dev
          enum:
            - dev
            - prod
tags:
  - name: login
    description: login
  - name: user
    description: user
  - name: room
    description: access rooms for owner
  - name: image
    description: post image
  - name: city
    description: access city
  - name: booking
    description: booking a room
 

paths:
  /login:
    post:
      tags:
        - login
      summary: login user
      description: login user
      requestBody: 
        required: true
        content:
          application/json :
            schema: 
              $ref: '#/components/schemas/loginRequest'
            example:
              email: anonim123
              password: anonim123
      responses:
        '400':
          description: bad request in login
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/loginHttpResponse'
              example:
                code: 400
                message: error bad request for login
                data: null
        '500':
          description: internal server error in login
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/loginHttpResponse'
              example:
                code: 500
                message: error internal server error for login
                data: null
        '200':
          description: sucess in login
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/loginHttpResponse'
              example:
                code: 200
                message: sucess login
                data: 
                  token: secret
  /user:
    post:
      tags:
        - user
      summary: registrasion for user
      description: create user
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/userRequest'
            example:
              name: anonim
              email: anonim@gmail.com
              password: anonim
      responses:
        '400':
          description: bad request in create user
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/userHttpResponse'
              example:
                code: 400
                message: error bad request for create new user
                data:
        '500':
          description: internal server error in create user
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/userHttpResponse'
              example:
                code: 500
                message: error internal server error for create new user
                data:
        '200':
          description: success create user
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/userHttpResponse'
              example:
                code: 200
                message: success create new user
                data:
                  user_uid: 1
                  created_at: 2022-02-15T02:18:32.857Z
                  updated_at: 2022-02-15T02:18:32.857Z
                  name: anonim
                  email: anonim@gmail.com
  /user/me:
    get:
      tags:
        - user
      summary: get user detail
      description: user can get detail by parsing id with jwt
      responses:
        '500':
          description: internal server error in get user
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/userHttpResponse'
              example:
                code: 500
                message: error internal server error for get user
                data:
        '200':
          description: success get user
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/userHttpResponse'
              example:
                code: 200
                message: success get user
                data:
                  id: 1
                  created_at: 2022-02-15T02:18:32.857Z
                  updated_at: 2022-02-15T02:18:32.857Z
                  name: anonim
                  email: anonim@gmail.com
    put:
      tags:
        - user
      summary: update user
      description: user can update by parsing id with jwt
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/userRequest'
            example:
              name: anonim123
              email: anonim123@gmail.com
              password: anonim123
      responses:
        '400':
          description: bad request in update user
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/userHttpResponse'
              example:
                code: 400
                message: error in request for update user
                data:
        '500':
          description: internal server error in update user
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/userHttpResponse'
              example:
                code: 500
                message: error internal server error for update user
                data:
        '200':
          description: success update user
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/userHttpResponse'
              example:
                code: 200
                message: success update user
                data:
                  id: 1
                  created_at: 2022-02-15T02:18:32.857Z
                  updated_at: 2022-02-15T02:18:32.857Z
                  name: anonim123
                  email: anonim123@gmail.com
    delete:
      tags:
        - user
      summary: delete user
      description: user can get detail by parsing id with jwt
      responses:
        '500':
          description: internal server error in delete user
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/userHttpResponse'
              example:
                code: 500
                message: error internal server error for delete user
                data:
        '200':
          description: success delete user
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/userHttpResponse'
              example:
                code: 200
                message: success delete user
                data:
                  deleted_at: 2022-02-15T02:18:32.857Z
  /city:
    get:
      tags:
        - city
      summary: get all cities
      description: get all cities
      responses:
        '500':
          description: internal server error in get all cities
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/productTypeHttpResponse'
              example:
                code: 500
                message: error internal server for get cities
                data:
        '200':
          description: success get all cities
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: integer
                    example: 200
                  message:
                    type: string
                    example: success get all cities
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/productTypeHttpResponse'
                    example:
                      - id: 1
                        name: city 1
                      - id: 2
                        name: city 2
  /room/:
    post:
      tags:
        - room
      summary: create room
      description: owner can create room and parsing user_uid by jwt
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/productRequest'
            example:
              name: anonim
              location_city: malang
              price: 20000
              capacity: 10
              detail: anonim detail
      responses:
        '400':
          description: bad request in add new room
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/productHttpResponse'
              example:
                code: 400
                message: error in request for add new room
                data:
        '500':
          description: internal server error in add new room
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/productHttpResponse'
              example:
                code: 500
                message: error internal server error for add new room
                data:
        '200':
          description: success add new room
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/productHttpResponse'
              example:
                code: 200
                message: success add new room
                data: 
                  room_uid: 1
                  created_at: 2022-02-15T02:18:32.857Z
                  updated_at: 2022-02-15T02:18:32.857Z
                  name: anonim
  /room/{city_id}/?category=premium/?name=name:
    parameters:
      - in: path
        name: city_id
        required: true
        schema: 
          type: string
        example:
          city_id: 1
        description: get the room's city by city id
      - in: query
        name: category
        required: true
        schema: 
          type: string
        example: 
          status: premium
        description: get the rooms by it category
      - in: query
        name: name
        required: true
        schema: 
          type: string
        example: 
          status: name room
        description: get the list room by name
    get:
      tags:
        - room
      summary: get all owner's rooms 
      description: owner can wacth their rooms and parsing user_uid by jwt
      responses:
        '500':
          description: internal server error in get all owner's rooms
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/productHttpResponse'
              example:
                code: 500
                message: error internal server for get owner's room
                data:
        '200':
          description: success get all owner's rooms
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: integer
                    example: 200
                  message:
                    type: string
                    example: success get all owner's rooms
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/productDataResponse'
                    example:
                      - room_uid: 1
                        name: anonim1
                        image: image
                        price: 2000
                        description: anonim detail 1
                        status: open
                      - room_uid: 2
                        name: anonim2
                        image: image
                        price: 2000
                        description: anonim detail 2
                        status: open
  /room/{room_uid}:
    parameters:
      - in: path
        name: room_uid
        required: true
        schema: 
          type: string
        example: fnsijni
        description: get detail room by room_uid
    get:
      tags:
        - room
      summary: get single owner's room by room_uid
      description: owner can wacth single owner's rooms and parsing user_uid by jwt
      responses:
        '500':
          description: internal server error in get single owner's room
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/productHttpResponse'
              example:
                code: 500
                message: error internal server error for get single owner's room
                data:
        '200':
          description: success get single owner's room
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/productHttpResponse'
              example:
                code: 200
                message: success get single owner's room
                data:
                  room_uid: 1
                  created_at: 2022-02-15T02:18:32.857Z
                  updated_at: 2022-02-15T02:18:32.857Z
                  name: anonim2
                  image: [
                          image1,
                          image2,
                        ]
                  address: address 1
                  owner: owner name
                  rating: 4.9
                  price: 2000
                  description: anonim detail 2
                  status: open
                  booking: 
                    - booking_uid: njasdnajn
                      start_date: "2022-02-15T02:18:32.857Z"
                      end_date: "2022-02-15T02:18:32.857Z"
                      status: end
                    - booking_uid: dsakjdna
                      start_date: "2022-02-15T02:18:32.857Z"
                      end_date: "2022-02-15T02:18:32.857Z"
                      status: end
    put:
      tags:
        - room
      summary: update single owner's room
      description: owner can update their room with pasrsing by uid and parsing user_id by jwt
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/productRequest'
            example:
              name: anonim
              location_city: malang
              price: 20000
              capacity: 10
              detail: anonim detail
              status: close
      responses:
        '400':
          description: bad request in update room
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/productHttpResponse'
              example:
                code: 400
                message: error in request for update room
                data:
        '500':
          description: internal server in update room
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/productHttpResponse'
              example:
                code: 500
                message: error internal server error for update room
                data:
        '200':
          description: success update room
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/productHttpResponse'
              example:
                code: 200
                message: success update room
                data:
                  id: 1
                  created_at: "2022-02-15T02:18:32.857Z"
                  updated_at: "2022-02-15T02:18:32.857Z"
                  name: "anonim"
    delete:
      tags:
        - room
      summary: delete room by room_uid
      description: owner can delete their room and parsing user_id by jwt
      responses:
        '500':
          description: internal server error in delete room
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/productHttpResponse'
              example:
                code: 500
                message: error internal server error for delete room
                data:
        '200':
          description: success delete room
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/productHttpResponse'
              example:
                code: 200
                message: success delete room
                data:
                  deleted_at: 2022-02-15T02:18:32.857Z
  /room/{room_uid}/image:
    post:
      tags:
        - image
      summary: upload image for room
      description: user can upload image and parsing user_uid by jwt
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/productRequest'
            example:
              - image: image1
              - image: image2
      responses:
        '400':
          description: bad request in upload image
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/productHttpResponse'
              example:
                code: 400
                message: error in request for upload image
                data:
        '500':
          description: internal server error in upload image
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/productHttpResponse'
              example:
                code: 500
                message: error internal server error for upload image
                data:
        '200':
          description: success upload image
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/productHttpResponse'
              example:
                code: 200
                message: success upload image
                data: 
    delete:
      tags:
        - image
      summary: delete images for room
      description: user can delete image and parsing user_uid by jwt
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/productRequest'
            example:
              - image: image1
              - image: image2
      responses:
        '400':
          description: bad request in delete image
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/productHttpResponse'
              example:
                code: 400
                message: error in request for delete image
                data:
        '500':
          description: internal server error in delete image
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/productHttpResponse'
              example:
                code: 500
                message: error internal server error for delete image
                data:
        '200':
          description: success delete image
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/productHttpResponse'
              example:
                code: 200
                message: success delete image
                data: 
  /booking:
    post:
      tags:
        - booking
      summary: create booking
      description: user can add room to booking
      requestBody:
        required: true
        content:
          application/json:
            schema: 
              $ref: '#/components/schemas/cartRequest'
            example:
              room_uid: 1
              start_date: "2022-02-15T02:18:32.857Z"
              end_date: "2022-02-15T02:18:32.857Z"
      responses:
        '400':
          description: bad request in create new booking
          content:
            application/json:
              schema: 
                $ref: '#/components/schemas/cartHttpResponse'
              example:
                code: 400
                message: error in request for create booking
                data:
        '500':
          description: internal server error in create booking
          content:
            application/json:
              schema: 
                $ref: '#/components/schemas/cartHttpResponse'
              example:
                code: 500
                message: error internal server error for create booking
                data:
        '200':
          description: success create booking
          content:
            application/json:
                schema: 
                  $ref: '#/components/schemas/cartHttpResponse'
                example:
                  code: 200
                  message: success create booking
                  data:
                    id: 1
                    created_at: 2022-02-15T02:18:32.857Z
                    updated_at: 2022-02-15T02:18:32.857Z
                    room_uid: 1
  /booking/?status=onGoing:
    parameters:
      - in: query
        name: status
        schema:
          type: string
        example:
          status: waiting, cancel, reservation, onGoing, end
        description: to find booking by status
    get:
      tags:
        - booking
      summary: get all booking's room
      description: user can wacth their booking's room
      responses:
        '500':
          description: internal server in get all booking's room by status
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/productHttpResponse'
              example:
                code: 500
                message: error internal server for get booking's room by status
                data:
        '200':
          description: success get all booking's room by status
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: integer
                    example: 200
                  message:
                    type: string
                    example: success get all booking's room by status
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/cartDataResponse'
                    example:
                    - booking_uid: 1
                      created_at: 2022-02-15T02:18:32.857Z
                      updated_at: 2022-02-15T02:18:32.857Z
                      start_date: "2022-02-15T02:18:32.857Z"
                      end_date: "2022-02-15T02:18:32.857Z"
                      price: 1000
                      
                    - id: 2
                      created_at: 2022-02-15T02:18:32.857Z
                      updated_at: 2022-02-15T02:18:32.857Z
                      start_date: "2022-02-15T02:18:32.857Z"
                      end_date: "2022-02-15T02:18:32.857Z"
                      price: 1000
  /booking/{booking_id}:
    parameters:
      - in: path
        name: booking_id
        required: true
        schema: 
          type: string
        description: the uniq uid each booking
    put:
      tags:
        - booking
      summary: update booking
      description: user can update booking
      requestBody:
        required: true
        content:
          application/json:
            schema: 
              $ref: '#/components/schemas/cartRequest'
            example:
              room_uid: 1
              start_date: "2022-02-15T02:18:32.857Z"
              end_date: "2022-02-15T02:18:32.857Z"
      responses:
        '400':
          description: bad request in update booking
          content:
            application/json:
              schema: 
                $ref: '#/components/schemas/cartHttpResponse'
              example:
                code: 400
                message: error in request for update booking
                data:
        '500':
          description: internal server error in update booking
          content:
            application/json:
              schema: 
                $ref: '#/components/schemas/cartHttpResponse'
              example:
                code: 500
                message: error internal server error for update booking
                data:
        '200':
          description: success update booking
          content:
            application/json:
                schema: 
                  $ref: '#/components/schemas/cartHttpResponse'
                example:
                  code: 200
                  message: success update booking
                  data:
                    id: 1
                    created_at: 2022-02-15T02:18:32.857Z
                    updated_at: 2022-02-15T02:18:32.857Z
                    room_uid: 1
    delete:
      tags:
        - booking
      summary: delete booking's room
      description: user delete booking's room
      responses:
        '500':
          description: internal server in delete booking's room
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/cartHttpResponse'
              example:
                code: 500
                message: error internal server for delete booking's room
                data:
        '200':
          description: success delete booking's room
          content:
            application/json:
              schema: 
                $ref: '#/components/schemas/cartHttpResponse'
              example:
                code: 200
                message: success delete booking's room
                data:
                  deleted_at: 2022-02-15T02:18:32.857Z

components:
  schemas:
    loginRequest:
      type: object
      properties :
        email :
          type: string
          format: string
        password : 
          type: string
          format: string
    loginDataResponse:
      type: object
      properties:
        token:
          type: string
    loginHttpResponse:
      type: object
      properties:
        code:
          type: integer
        message:
          type: string
        data:
          $ref: '#/components/schemas/loginDataResponse'
    userRequest:
      type: object
      properties:
        name:
          type: string
        email:
          type: string
        password:
          type: string
    userDataResponse:
      type: object
      properties:
        id :
          type: integer
          format: uint
        created_at :
          type: string
          format: date-time
        updated_at :
          type: string
          format : date-time
        name : 
          type: string
          format: string
        email :
          type: string
          format: string
    userHttpResponse:
      type: object
      properties:
        code:
          type: integer
        message:
          type: string
        data:
          $ref: '#/components/schemas/userDataResponse'
    productRequest:
      type: object
      properties:
        name:
          type: string
        product_type:
          type: integer
        price:
          type: integer
        qty :
          type: integer
        description :
          type: string
    productDataResponse:
      type: object
      properties:
        id :
          type: integer
          format: uint
        created_at :
          type: string
          format: date-time
        updated_at :
          type: string
          format : date-time
        name : 
          type: string
          format: string
        product_type:
          type: integer
        price :
          type: integer
          format: int
        qty :
          type: integer
          format: int
        description :
          type: string
          format: string
    productHttpResponse:
      type: object
      properties:
        code:
          type: integer
        message:
          type: string
        data:
          $ref: '#/components/schemas/productDataResponse'
    cartRequest:
      type: object
      properties:
        product_id:
          type: integer
        qty:
          type: integer
    cartDataResponse:
      type: object
      properties:
        id :
          type: integer
          format: uint
        created_at :
          type: string
          format: date-time
        updated_at :
          type: string
          format : date-time
        product_name:
          type: string
        qty:
          type: string
        price:
          type: integer
    cartHttpResponse:
      type: object
      properties:
        code:
          type: integer
        message:
          type: string
        data:
          $ref: '#/components/schemas/cartDataResponse'
    orderDetailRequest:
      type: object
      properties:
        cart_id:
          type: integer
        order_id:
          type: integer
    orderDetailDataResponse:
      type: object
      properties:
        id :
          type: integer
          format: uint
        created_at :
          type: string
          format: date-time
        updated_at :
          type: string
          format : date-time
        product_name:
          type: string
        qty:
          type: string
        price:
          type: integer
    orderDetailHttpResponse:
      type: object
      properties:
        code:
          type: integer
        message:
          type: string
        data:
          $ref: '#/components/schemas/orderDetailDataResponse'
    orderRequest:
      type: object
      properties:
        user_id:
          type: integer
        payment_method_id:
          type: integer
    orderDataResponse:
      type: object
      properties:
        id :
          type: integer
          format: uint
        created_at :
          type: string
          format: date-time
        updated_at :
          type: string
          format : date-time
        qty_total:
          type: integer
        price_total:
          type: integer
    orderHttpResponse:
      type: object
      properties:
        code:
          type: integer
        message:
          type: string
        data:
          $ref: '#/components/schemas/orderDataResponse'
    productTypeRequest:
      type: object
      properties:
        name:
          type: string
    productTypeDataResponse:
      type: object
      properties:
        id :
          type: integer
          format: uint
        created_at :
          type: string
          format: date-time
        updated_at :
          type: string
          format : date-time
        name:
          type: string
    productTypeHttpResponse:
      type: object
      properties:
        code:
          type: integer
        message:
          type: string
        data:
          $ref: '#/components/schemas/productTypeDataResponse'
    paymentMethodRequest:
      type: object
      properties:
        name:
          type: string
    paymentMethodDataResponse:
      type: object
      properties:
        id :
          type: integer
          format: uint
        created_at :
          type: string
          format: date-time
        updated_at :
          type: string
          format : date-time
        name:
          type: string
    paymentMethodHttpResponse:
      type: object
      properties:
        code:
          type: integer
        message:
          type: string
        data:
          $ref: '#/components/schemas/paymentMethodDataResponse'






